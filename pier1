
---- Functions ----

local function goBottom()
	local yPos = 0

	-- Go down while touch bottom
	while turtle.down() do
		yPos = yPos + 1
	end

	return yPos
end

-- Put Vertical pier from bottom to current position
local function putVerticalPiers()
	-- Go to bottom
	local yPos = goBottom()

	-- Go up and put pier
	while yPos > 0 do
		turtle.turnRight()
		turtle.dig()
		turtle.place()
		turtle.turnRight()
		turtle.turnRight()
		turtle.dig()
		turtle.place()
		turtle.turnRight()

		-- Put short beam now
		if (yPos + 1) % 4 == 0 then
			turtle.placeDown()
		end

		turtle.up()
		yPos = yPos - 1
	end
end


-- Put beams
local function putBeams()
	-- Go to bottom
	local yPos = goBottom()

	while yPos > 0 do
		-- Put beams
		if yPos % 4 == 0 then
		turtle.turnRight()
		turtle.dig()
		turtle.place()
		turtle.turnRight()
		turtle.turnRight()
		turtle.dig()
		turtle.place()
		turtle.turnRight()
		end

		turtle.up()
		yPos = yPos -1
	end
end


-- Build piers
local function buildPier()
	-- Put first piers
	putVerticalPiers()
	turtle.forward()

	-- Put long beams
	for i = 1, 3 do
		putBeams()
		turtle.forward()
	end

	-- Put second piers
	putVerticalPiers()
end

---- Main Code ----

local args = {...} -- Get arguments

local count = 1 -- number of piers

turtle.select(1)
assert(turtle.getItemCount(1) > 0, "NO BLOCKS!!\n")

-- get number of piers
if #args >= 1 then
	count = tonumber(args[1])
end

turtle.forward()
turtle.down()

for pierNum = 1, count do
	write("@" .. pierNum .. "\n")
	buildPier()

	-- Move next positioon
	if pierNum < count then
		for i = 1, 10 do
			turtle.forward()
		end
	end
end

-- Return starting point
turtle.up()
turtle.up()
for i = 1, (14 * count - 10) + 1 do
	turtle.back()
end
turtle.down()